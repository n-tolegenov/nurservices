<?xml version="1.0" encoding="UTF-8"?>

<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>

  <groupId>kz.nurdev</groupId>
  <artifactId>nurservices</artifactId>
  <version>1.0-SNAPSHOT</version>
  <packaging>pom</packaging>

  <name>nurservices</name>
  <modules>
    <module>customer</module>
    <module>fraud</module>
    <module>eureka-server</module>
      <module>clients</module>
      <module>notification</module>
      <module>apigw</module>
  </modules>

  <properties>
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    <maven.compiler.source>17</maven.compiler.source>
    <maven.compiler.target>17</maven.compiler.target>
    <spring.boot.dependencies.version>2.5.7</spring.boot.dependencies.version>
    <spring.boot.maven.plugin.version>2.5.7</spring.boot.maven.plugin.version>
    <spring-cloud.version>2020.0.3</spring-cloud.version>
  </properties>

  <!--
    Использование
    spring-boot-dependencies
    в проекте позволяет облегчить управление зависимостями.
    Вместо того чтобы явно указывать версии каждой библиотеки Spring Boot в файле pom.xml,
    вы можете просто импортировать этот набор зависимостей и использовать переменные версий,
    определенные в нем, для всех ваших зависимостей Spring Boot.
    Это делает управление зависимостями более простым
    и позволяет обновлять версии библиотек централизованно в одном месте.
   -->
  <dependencyManagement>
    <dependencies>
      <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-dependencies</artifactId>
        <version>${spring.boot.dependencies.version}</version>
        <!--
          Когда мы используем эту зависимость с
          <scope>import</scope>,
          мы сообщаем Maven, что нужно использовать версии зависимостей,
          определенные в spring-boot-dependencies, но не включать сами зависимости в проект.
          Это позволяет уменьшить объем файла pom.xml и избежать дублирования зависимостей.
         -->
        <scope>import</scope>
        <type>pom</type>
      </dependency>
      <dependency>
        <groupId>org.springframework.cloud</groupId>
        <artifactId>spring-cloud-dependencies</artifactId>
        <version>${spring-cloud.version}</version>
        <type>pom</type>
        <scope>import</scope>
      </dependency>
    </dependencies>
  </dependencyManagement>

  <dependencies>
    <dependency>
      <groupId>org.projectlombok</groupId>
      <artifactId>lombok</artifactId>
    </dependency>
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-test</artifactId>
    </dependency>
    <dependency>
      <groupId>org.springframework.cloud</groupId>
      <artifactId>spring-cloud-starter-openfeign</artifactId>
    </dependency>
  </dependencies>

  <build>
    <pluginManagement><!-- lock down plugins versions to avoid using Maven defaults (may be moved to parent pom) -->
      <plugins>

        <!--
          spring-boot-maven-plugin,
          это плагин, специально предназначенный для сборки и запуска приложений на основе Spring Boot.
          Он добавляет в ваш проект необходимые механизмы для упаковки приложения в исполняемый JAR-файл
          и запуска его встроенным сервером приложений.
         -->
        <plugin>
          <groupId>org.springframework.boot</groupId>
          <artifactId>spring-boot-maven-plugin</artifactId>
          <version>${spring.boot.maven.plugin.version}</version>
        </plugin>
      </plugins>
    </pluginManagement>
  </build>
</project>
